package com.hiroute.hiroute.ui.screen.main.home

import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.PaddingValues
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.LazyRow
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Add
import androidx.compose.material.icons.filled.DateRange
import androidx.compose.material.icons.filled.Star
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.Icon
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import com.hiroute.hiroute.ui.screen.main.home.placelist.PlaceModel
import com.hiroute.hiroute.ui.screen.main.home.routelist.RouteModel

@Composable
fun HomeView(modifier: Modifier = Modifier) {
    // ÏÉòÌîå Îç∞Ïù¥ÌÑ∞
    val placeModels = listOf(
        PlaceModel(1, "Î™ÖÎèô", "üõçÔ∏è", "ÏáºÌïëÏùò Î©îÏπ¥"),
        PlaceModel(2, "ÏÑ±Ïàò", "‚òï", "Ïπ¥Ìéò Í±∞Î¶¨"),
        PlaceModel(3, "ÌôçÎåÄ", "üéµ", "Ï†äÏùåÏùò Í±∞Î¶¨"),
        PlaceModel(4, "Í∞ïÎÇ®", "üè¢", "ÎπÑÏ¶àÎãàÏä§ Ï§ëÏã¨Í∞Ä"),
        PlaceModel(5, "Ïù¥ÌÉúÏõê", "üåç", "Îã§Íµ≠Ï†Å Î¨∏Ìôî"),
        PlaceModel(6, "Ïö©ÏÇ∞", "üèõÔ∏è", "Ïó≠ÏÇ¨ÏôÄ ÌòÑÎåÄ")
    )

    val routeModels = listOf(
        RouteModel(1, "ÏÑúÏö∏ Í≥†Í∂Å Ìà¨Ïñ¥", "4ÏãúÍ∞Ñ", listOf("Í≤ΩÎ≥µÍ∂Å", "Ï∞ΩÎçïÍ∂Å", "ÎçïÏàòÍ∂Å"), 4.8f),
        RouteModel(2, "ÌïúÍ∞ï ÎùºÏù¥Îî©", "2ÏãúÍ∞Ñ", listOf("ÎöùÏÑ¨", "Î∞òÌè¨", "Ïó¨ÏùòÎèÑ"), 4.6f),
        RouteModel(3, "Ïπ¥Ìéò Ìà¨Ïñ¥", "3ÏãúÍ∞Ñ", listOf("ÏÑ±Ïàò", "Ïó∞ÎÇ®Îèô", "Ìï©Ï†ï"), 4.7f),
        RouteModel(4, "ÏïºÍ≤Ω Î™ÖÏÜå", "5ÏãúÍ∞Ñ", listOf("NÏÑúÏö∏ÌÉÄÏõå", "Î∞òÌè¨ÎåÄÍµê", "ÏÑ∏ÎπõÎë•Îë•ÏÑ¨"), 4.9f)
    )

    LazyColumn(
        modifier = modifier
            .fillMaxSize()
            .padding(16.dp),
        verticalArrangement = Arrangement.spacedBy(16.dp),
        contentPadding = PaddingValues(bottom = 32.dp)
    ) {
        item {
            // ÏÉÅÎã® Î≤ÑÌäºÎì§ (2Îì±Î∂Ñ)
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.spacedBy(8.dp)
            ) {
                // ÏùºÏ†ï ÎßåÎì§Í∏∞ Î≤ÑÌäº
                Card(
                    modifier = Modifier
                        .weight(1f)
                        .clickable { /* ÏùºÏ†ï ÎßåÎì§Í∏∞ ÌÅ¥Î¶≠ */ },
                    colors = CardDefaults.cardColors(
                        containerColor = MaterialTheme.colorScheme.primaryContainer
                    ),
                    elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)
                ) {
                    Column(
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(16.dp),
                        horizontalAlignment = Alignment.CenterHorizontally
                    ) {
                        Icon(
                            imageVector = Icons.Default.Add,
                            contentDescription = null,
                            modifier = Modifier.size(32.dp),
                            tint = MaterialTheme.colorScheme.onPrimaryContainer
                        )
                        Spacer(modifier = Modifier.height(8.dp))
                        Text(
                            text = "ÏùºÏ†ï ÎßåÎì§Í∏∞",
                            style = MaterialTheme.typography.titleMedium,
                            fontWeight = FontWeight.Bold,
                            color = MaterialTheme.colorScheme.onPrimaryContainer
                        )
                    }
                }

                // ÏùºÏ†ï ÎΩëÍ∏∞ Î≤ÑÌäº
                Card(
                    modifier = Modifier
                        .weight(1f)
                        .clickable { /* ÏùºÏ†ï ÎΩëÍ∏∞ ÌÅ¥Î¶≠ */ },
                    colors = CardDefaults.cardColors(
                        containerColor = MaterialTheme.colorScheme.secondaryContainer
                    ),
                    elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)
                ) {
                    Column(
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(16.dp),
                        horizontalAlignment = Alignment.CenterHorizontally
                    ) {
                        Icon(
                            imageVector = Icons.Default.DateRange,
                            contentDescription = null,
                            modifier = Modifier.size(32.dp),
                            tint = MaterialTheme.colorScheme.onSecondaryContainer
                        )
                        Spacer(modifier = Modifier.height(8.dp))
                        Text(
                            text = "ÏùºÏ†ï ÎΩëÍ∏∞",
                            style = MaterialTheme.typography.titleMedium,
                            fontWeight = FontWeight.Bold,
                            color = MaterialTheme.colorScheme.onSecondaryContainer
                        )
                    }
                }
            }

        }

        item {
            // ÏßÄÍ∏à Ïù∏Í∏∞ÏûàÎäî Ïû•ÏÜå ÏÑπÏÖò
            Text(
                text = "ÏßÄÍ∏à Ïù∏Í∏∞ÏûàÎäî Ïû•ÏÜå",
                style = MaterialTheme.typography.titleLarge,
                fontWeight = FontWeight.Bold,
                modifier = Modifier.padding(bottom = 12.dp)
            )
        }


        item{
            // Ïû•ÏÜå ÏÑ†ÌÉù Î≤ÑÌäºÎì§
            LazyRow(
                horizontalArrangement = Arrangement.spacedBy(8.dp),
                contentPadding = PaddingValues(bottom = 16.dp)
            ) {
                items(placeModels) { place ->
                    Card(
                        modifier = Modifier
                            .clickable { /* Ïû•ÏÜå ÏÑ†ÌÉù */ }
                            .width(120.dp),
                        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)
                    ) {
                        Column(
                            modifier = Modifier.padding(12.dp),
                            horizontalAlignment = Alignment.CenterHorizontally
                        ) {
                            Text(
                                text = place.image,
                                style = MaterialTheme.typography.headlineMedium
                            )
                            Text(
                                text = place.name,
                                style = MaterialTheme.typography.titleMedium,
                                fontWeight = FontWeight.Medium,
                                textAlign = TextAlign.Center
                            )
                            Text(
                                text = place.description,
                                style = MaterialTheme.typography.bodySmall,
                                color = MaterialTheme.colorScheme.onSurfaceVariant,
                                textAlign = TextAlign.Center
                            )
                        }
                    }
                }
            }
        }


        item {
            // Ïù∏Í∏∞ Î£®Ìä∏ ÏÑπÏÖò
            Text(
                text = "Ïù∏Í∏∞ Î£®Ìä∏",
                style = MaterialTheme.typography.titleLarge,
                fontWeight = FontWeight.Bold,
                modifier = Modifier.padding(bottom = 12.dp)
            )

        }




        items(routeModels) { route ->
            Card(
                modifier = Modifier
                    .clickable { /* Î£®Ìä∏ ÏÑ†ÌÉù */ }
                    .fillMaxWidth(),
                elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),
                shape = RoundedCornerShape(12.dp)
            ) {
                Column(
                    modifier = Modifier.padding(16.dp)
                ) {
                    Row(
                        modifier = Modifier.fillMaxWidth(),
                        horizontalArrangement = Arrangement.SpaceBetween,
                        verticalAlignment = Alignment.Top
                    ) {
                        Column(modifier = Modifier.weight(1f)) {
                            Text(
                                text = route.title,
                                style = MaterialTheme.typography.titleMedium,
                                fontWeight = FontWeight.Bold
                            )
                            Spacer(modifier = Modifier.height(4.dp))
                            Text(
                                text = route.duration,
                                style = MaterialTheme.typography.bodyMedium,
                                color = MaterialTheme.colorScheme.onSurfaceVariant
                            )
                        }
                        // ÌèâÏ†ê
                        Row(
                            verticalAlignment = Alignment.CenterVertically
                        ) {
                            Icon(
                                imageVector = Icons.Default.Star,
                                contentDescription = null,
                                modifier = Modifier.size(16.dp),
                                tint = Color(0xFFFFD700)
                            )
                            Text(
                                text = route.rating.toString(),
                                style = MaterialTheme.typography.bodySmall,
                                modifier = Modifier.padding(start = 4.dp)
                            )
                        }
                    }

                    Spacer(modifier = Modifier.height(12.dp))

                    // Í≤ΩÏú†ÏßÄÎì§
                    Text(
                        text = "Í≤ΩÏú†ÏßÄ: ${route.places.joinToString(" ‚Üí ")}",
                        style = MaterialTheme.typography.bodySmall,
                        color = MaterialTheme.colorScheme.onSurfaceVariant
                    )

                    Spacer(modifier = Modifier.height(12.dp))

                    // ÏÉÅÏÑ∏Î≥¥Í∏∞ Î≤ÑÌäº
                    Button(
                        onClick = { /* ÏÉÅÏÑ∏Î≥¥Í∏∞ */ },
                        modifier = Modifier.fillMaxWidth(),
                        colors = ButtonDefaults.buttonColors(
                            containerColor = MaterialTheme.colorScheme.primary
                        ),
                        shape = RoundedCornerShape(8.dp)
                    ) {
                        Text("ÏÉÅÏÑ∏Î≥¥Í∏∞")
                    }
                }
            }
        }
    }
}
